const fs = require('fs');
const axios = require('axios');

const testTag = 'TestX';
const fileA = 'sources/matrizA.txt';
const fileB = 'sources/matrizB.txt';

function readFileAndParseToIntMatrix(path) {
  return new Promise((resolve, reject) => {
    fs.readFile(path, 'utf8', (err, data) => {
      if (err) {
        reject(err);
      } else {
        const lines = data.trim().split('\n');
        const matrix = lines.map(line => line.trim().split(' ').map(Number));
        resolve(matrix);
      }
    });
  });
}

async function InitExecutions(test, matrixA, matrixB) {
  let respuesta = null;
  try {
    
    respuesta = await axios.post('http://localhost:8081/', {
      TestID: test,
      MatrixA: matrixA,
      MatrixB: matrixB
    });
    console.log('Python:', respuesta.data);

    respuesta = await axios.post('http://localhost:8082/', {
      TestID: test,
      MatrixA: matrixA,
      MatrixB: matrixB
    });
    console.log('Golang:', respuesta.data);

  } catch (error) {
    console.error('Error al enviar los datos:', error);
  }
}

Promise.all([readFileAndParseToIntMatrix(fileA), readFileAndParseToIntMatrix(fileB)])
  .then(([matrixA, matrixB]) => {
    InitExecutions(testTag, matrixA, matrixB);
  })
  .catch(error => {
    console.error('Error al leer los archivos:', error);
  });
